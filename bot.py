import logging
import os
import base64
from io import BytesIO
import httpx
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg-webhook-bot")

ADMIN_ID = int(os.getenv("ADMIN_ID", "8033358653"))
DEFAULT_TOKENS = 20
TEXT_COST = 1
PHOTO_COST = 2
DOC_COST = 2

FIREBASE_URL = "https://botgpttok-default-rtdb.europe-west1.firebasedatabase.app"

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_MODEL = os.getenv("OPENROUTER_MODEL")
RENDER_URL = os.getenv("RENDER_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://myapp.onrender.com

DAN_PROMPT = """
–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —á–µ—Å—Ç–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.
–ï—Å–ª–∏ –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—É, –∞ —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
–ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–Ω —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äî –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ —ç—Ç–æ –∑–∞ —Ñ–∞–π–ª –∏ —á—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –ø–æ –¥–µ–ª—É.
"""

TEXT_LIKE = {".txt", ".py", ".json", ".md", ".yaml", ".yml", ".toml", ".ini", ".cfg", ".csv"}

# ================== FIREBASE ==================
async def firebase_get(path: str):
    async with httpx.AsyncClient() as client:
        r = await client.get(f"{FIREBASE_URL}/{path}.json")
        r.raise_for_status()
        return r.json() or {}

async def firebase_put(path: str, data):
    async with httpx.AsyncClient() as client:
        r = await client.put(f"{FIREBASE_URL}/{path}.json", json=data)
        r.raise_for_status()
        return r.json()

async def firebase_patch(path: str, data):
    async with httpx.AsyncClient() as client:
        r = await client.patch(f"{FIREBASE_URL}/{path}.json", json=data)
        r.raise_for_status()
        return r.json()

# ================== –•–ï–õ–ü–ï–†–´ ==================
def is_admin(user_id: int):
    return user_id == ADMIN_ID

async def ensure_user(user_id: int):
    user = await firebase_get(f"users/{user_id}")
    if not user:
        await firebase_put(f"users/{user_id}", {"tokens": DEFAULT_TOKENS})

async def get_tokens(user_id: int):
    user = await firebase_get(f"users/{user_id}")
    return user.get("tokens", DEFAULT_TOKENS) if user else DEFAULT_TOKENS

async def add_tokens(user_id: int, amount: int):
    await ensure_user(user_id)
    tokens = await get_tokens(user_id)
    await firebase_patch(f"users/{user_id}", {"tokens": tokens + amount})

async def use_tokens(user_id: int, amount: int):
    await ensure_user(user_id)
    tokens = await get_tokens(user_id)
    if tokens >= amount:
        await firebase_patch(f"users/{user_id}", {"tokens": tokens - amount})
        return True
    return False

async def refund_tokens(user_id: int, amount: int):
    await add_tokens(user_id, amount)

async def create_promo(code: str, amount: int):
    await firebase_put(f"promos/{code}", {"amount": amount})

async def redeem_promo(user_id: int, code: str):
    promo = await firebase_get(f"promos/{code}")
    if promo:
        await add_tokens(user_id, int(promo["amount"]))
        await firebase_patch(f"promos", {code: None})
        return True
    return False

# ================== –ú–ï–ù–Æ ==================
user_menu = ReplyKeyboardMarkup(
    [["üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å (–ø—Ä–æ–º–æ–∫–æ–¥)"], ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]],
    resize_keyboard=True
)
admin_menu = ReplyKeyboardMarkup(
    [["üíé –í—ã–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

# ================== GPT ==================
async def openrouter_chat(messages: list, model: str) -> str:
    try:
        async with httpx.AsyncClient() as client:
            r = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json"
                },
                json={"model": model, "messages": messages},
                timeout=60
            )
            r.raise_for_status()
            return r.json()["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI."

async def chat_with_ai_text(user_id: int, message: str) -> str:
    msgs = [{"role": "system", "content": DAN_PROMPT}, {"role": "user", "content": message}]
    return await openrouter_chat(msgs, OPENROUTER_MODEL)

async def chat_with_ai_file(filename: str, text: str) -> str:
    snippet = text[:8000]
    prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–∞–π–ª {filename}. –û–±—ä—è—Å–Ω–∏ —á—Ç–æ —ç—Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç, –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.\n\n{snippet}"
    msgs = [{"role": "system", "content": DAN_PROMPT}, {"role": "user", "content": prompt}]
    return await openrouter_chat(msgs, OPENROUTER_MODEL)

async def chat_with_ai_image(user_question: str, b64_image: str) -> str:
    user_content = [
        {"type": "text", "text": f"–í–æ–ø—Ä–æ—Å: {user_question}"},
        {"type": "image_url", "image_url": f"data:image/jpeg;base64,{b64_image}"},
    ]
    msgs = [{"role": "system", "content": DAN_PROMPT}, {"role": "user", "content": user_content}]
    return await openrouter_chat(msgs, OPENROUTER_MODEL)

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await ensure_user(uid)
    kb = admin_menu if is_admin(uid) else user_menu
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø GPT-–±–æ—Ç ü§ñ", reply_markup=kb)

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    tokens = await get_tokens(uid)
    await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {tokens} —Ç–æ–∫–µ–Ω–æ–≤.")

async def redeem_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Ç–∞–∫: /redeem –ö–û–î")
        return
    code = context.args[0].strip()
    if await redeem_promo(uid, code):
        await update.message.reply_text("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")

async def on_user_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    uid = update.effective_user.id
    if txt == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
        await balance(update, context)
    elif txt == "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å (–ø—Ä–æ–º–æ–∫–æ–¥)":
        await update.message.reply_text("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –º–æ–∂–Ω–æ —É @G0ODMEN")
    elif txt == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
            "/balance ‚Äî –±–∞–ª–∞–Ω—Å\n"
            "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)\n"
            "üíé –í—ã–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await ensure_user(uid)
    if not await use_tokens(uid, TEXT_COST):
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /redeem –ö–û–î")
        return
    reply = await chat_with_ai_text(uid, update.message.text)
    await update.message.reply_text(reply)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await ensure_user(uid)
    if not await use_tokens(uid, PHOTO_COST):
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /redeem –ö–û–î")
        return
    file = await update.message.photo[-1].get_file()
    file_bytes = await file.download_as_bytearray()
    b64 = base64.b64encode(file_bytes).decode("utf-8")
    question = (update.message.caption or "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ?").strip()
    reply = await chat_with_ai_image(question, b64)
    await update.message.reply_text(reply)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await ensure_user(uid)
    if not await use_tokens(uid, DOC_COST):
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /redeem –ö–û–î")
        return
    doc = update.message.document
    filename = doc.file_name or "file"
    ext = os.path.splitext(filename.lower())[1]
    tgfile = await doc.get_file()
    file_bytes = await tgfile.download_as_bytearray()
    if ext in TEXT_LIKE:
        try:
            text = file_bytes.decode("utf-8", errors="replace")
        except:
            text = "<–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª>"
        reply = await chat_with_ai_file(filename, text)
        await update.message.reply_text(reply)
    else:
        await update.message.reply_document(BytesIO(file_bytes), filename=filename)
        await update.message.reply_text("–≠—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª ‚Äî –≤–µ—Ä–Ω—É–ª –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ.")

# ================== –ê–î–ú–ò–ù ==================
(ADMIN_MENU, ASK_USER_ID, ASK_AMOUNT) = range(3)

async def admin_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return ConversationHandler.END
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=admin_menu)
    return ADMIN_MENU

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    if txt == "üíé –í—ã–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ USER_ID:", reply_markup=ReplyKeyboardRemove())
        return ASK_USER_ID
    elif txt == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é.", reply_markup=user_menu)
        return ConversationHandler.END
    return ADMIN_MENU

async def admin_ask_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    if not txt.isdigit():
        await update.message.reply_text("–ù—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π USER_ID.")
        return ASK_USER_ID
    context.user_data["target_id"] = int(txt)
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã–¥–∞—Ç—å?")
    return ASK_AMOUNT

async def admin_ask_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    if not txt.isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return ASK_AMOUNT
    target_id = context.user_data["target_id"]
    await add_tokens(target_id, int(txt))
    await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–æ {txt} —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}", reply_markup=admin_menu)
    return ADMIN_MENU

async def admin_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–¥–º–∏–Ω-–¥–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=user_menu)
    return ConversationHandler.END

# ================== MAIN ==================
def main():
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("redeem", redeem_cmd))

    # –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app.add_handler(MessageHandler(filters.Regex("^üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å$|^‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å \\(–ø—Ä–æ–º–æ–∫–æ–¥\\)$|^‚ÑπÔ∏è –ü–æ–º–æ—â—å$"), on_user_button))

    # –∞–¥–º–∏–Ω-–º–µ–Ω—é
    admin_conv = ConversationHandler(
        entry_points=[CommandHandler("admin", admin_entry)],
        states={
            ADMIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_menu_handler)],
            ASK_USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_ask_user_id)],
            ASK_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_ask_amount)],
        },
        fallbacks=[CommandHandler("cancel", admin_cancel)],
        allow_reentry=True
    )
    app.add_handler(admin_conv)

    # AI –æ–±—Ä–∞–±–æ—Ç–∫–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    # Webhook
    port = int(os.environ.get("PORT", 5000))
    webhook_url = f"{RENDER_URL}/webhook/{os.getenv('TELEGRAM_TOKEN')}"
    logger.info(f"–ó–∞–ø—É—Å–∫ Webhook -> {webhook_url}")
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=f"webhook/{os.getenv('TELEGRAM_TOKEN')}",
        webhook_url=webhook_url
    )

if __name__ == "__main__":
    main()
