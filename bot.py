import logging
import os
import base64
from io import BytesIO

import httpx
import firebase_admin
from firebase_admin import credentials, db
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

from config import TELEGRAM_TOKEN, OPENROUTER_API_KEY, OPENROUTER_MODEL, FIREBASE_CRED_JSON

# ========= –õ–û–ì–ò =========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg-gpt-bot")

# ========= –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =========
ADMIN_ID = int(os.getenv("ADMIN_ID", "8033358653"))
TEXT_COST = int(os.getenv("TEXT_COST", "1"))
PHOTO_COST = int(os.getenv("PHOTO_COST", "2"))
DOC_COST = int(os.getenv("DOC_COST", "2"))
DEFAULT_TOKENS = int(os.getenv("DEFAULT_TOKENS", "20"))

# ========= Firebase =========
cred = credentials.Certificate(FIREBASE_CRED_JSON)
firebase_admin.initialize_app(cred, {
    "databaseURL": "https://botgpttok-default-rtdb.europe-west1.firebasedatabase.app/"
})
users_ref = db.reference("users")
promos_ref = db.reference("promos")
history_ref = db.reference("history")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–≥–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π

# ========= GPT =========
DAN_PROMPT = """–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —á–µ—Å—Ç–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."""

async def openrouter_chat(messages: list, model: str) -> str:
    try:
        async with httpx.AsyncClient() as client:
            r = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={"Authorization": f"Bearer {OPENROUTER_API_KEY}", "Content-Type": "application/json"},
                json={"model": model, "messages": messages},
                timeout=60,
            )
            r.raise_for_status()
            data = r.json()
            return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ GPT API: {e}")
        raise

async def chat_with_ai_text(user_id: int, message: str) -> str:
    msgs = [
        {"role": "system", "content": DAN_PROMPT},
        {"role": "user", "content": message}
    ]
    return await openrouter_chat(msgs, OPENROUTER_MODEL)

async def chat_with_ai_image(user_question: str, b64_image: str) -> str:
    user_content = [
        {"type": "text", "text": f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_question}\n–ù–∏–∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç."},
        {"type": "image_url", "image_url": f"data:image/jpeg;base64,{b64_image}"}
    ]
    msgs = [
        {"role": "system", "content": DAN_PROMPT},
        {"role": "user", "content": user_content},
    ]
    return await openrouter_chat(msgs, OPENROUTER_MODEL)

async def chat_with_ai_file(filename: str, text: str) -> str:
    snippet = text[:8000]
    prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–∞–π–ª: {filename}\n–û–±—ä—è—Å–Ω–∏, —á—Ç–æ —ç—Ç–æ –∑–∞ —Ñ–∞–π–ª –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.\n–§—Ä–∞–≥–º–µ–Ω—Ç:\n{snippet}"
    msgs = [{"role": "system", "content": DAN_PROMPT}, {"role": "user", "content": prompt}]
    return await openrouter_chat(msgs, OPENROUTER_MODEL)

# ========= –•–ï–õ–ü–ï–†–´ Firebase =========
def ensure_user(user_id: int):
    uid = str(user_id)
    if not users_ref.child(uid).get():
        users_ref.child(uid).set({"tokens": DEFAULT_TOKENS})

def get_tokens(user_id: int) -> int:
    uid = str(user_id)
    data = users_ref.child(uid).get()
    return data.get("tokens", DEFAULT_TOKENS) if data else DEFAULT_TOKENS

def add_tokens(user_id: int, amount: int):
    uid = str(user_id)
    ensure_user(user_id)
    tokens = get_tokens(user_id) + amount
    users_ref.child(uid).update({"tokens": tokens})

def use_tokens(user_id: int, amount: int) -> bool:
    uid = str(user_id)
    ensure_user(user_id)
    tokens = get_tokens(user_id)
    if tokens >= amount:
        users_ref.child(uid).update({"tokens": tokens - amount})
        return True
    return False

def refund_tokens(user_id: int, amount: int):
    add_tokens(user_id, amount)

def create_promo(code: str, amount: int):
    promos_ref.child(code).set(amount)

def redeem_promo(user_id: int, code: str) -> bool:
    if promos_ref.child(code).get():
        add_tokens(user_id, promos_ref.child(code).get())
        promos_ref.child(code).delete()
        return True
    return False

# ========= –ú–ï–ù–Æ =========
user_menu = ReplyKeyboardMarkup([["üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å (–ø—Ä–æ–º–æ–∫–æ–¥)"], ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]], resize_keyboard=True)
admin_menu = ReplyKeyboardMarkup([["üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å (–ø—Ä–æ–º–æ–∫–æ–¥)"], ["üíé –í—ã–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã", "üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"], ["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)

# ========= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    kb = admin_menu if uid == ADMIN_ID else user_menu
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø GPT-–±–æ—Ç ü§ñ", reply_markup=kb)

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {get_tokens(uid)} —Ç–æ–∫–µ–Ω–æ–≤.")

async def redeem_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Ç–∞–∫: /redeem –ö–û–î")
        return
    code = context.args[0].strip()
    if redeem_promo(uid, code):
        await update.message.reply_text("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
async def on_user_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    uid = update.effective_user.id
    if txt == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
        await balance(update, context)
    elif txt == "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å (–ø—Ä–æ–º–æ–∫–æ–¥)":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π: /redeem –ö–û–î")
    elif txt == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await update.message.reply_text("‚ÑπÔ∏è –Ø GPT-–±–æ—Ç:\n–û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª—ã –∏ —Ñ–æ—Ç–æ.\n–ö–æ–º–∞–Ω–¥—ã: /start, /balance, /redeem –ö–û–î")

# –¢–µ–∫—Å—Ç
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    if not use_tokens(uid, TEXT_COST):
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /redeem –ö–û–î")
        return
    try:
        reply = await chat_with_ai_text(uid, update.message.text)
        await update.message.reply_text(reply)
    except Exception:
        refund_tokens(uid, TEXT_COST)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")

# –§–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    if not use_tokens(uid, PHOTO_COST):
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /redeem –ö–û–î")
        return
    try:
        file = await update.message.photo[-1].get_file()
        file_bytes = await file.download_as_bytearray()
        b64 = base64.b64encode(file_bytes).decode("utf-8")
        question = (update.message.caption or "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ?").strip()
        reply = await chat_with_ai_image(question, b64)
        await update.message.reply_text(reply)
    except Exception:
        refund_tokens(uid, PHOTO_COST)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")

# –§–∞–π–ª—ã
TEXT_LIKE = {".txt", ".py", ".json", ".md", ".yaml", ".yml", ".toml", ".ini", ".cfg", ".csv"}

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    if not use_tokens(uid, DOC_COST):
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /redeem –ö–û–î")
        return
    doc = update.message.document
    filename = doc.file_name or "file"
    ext = os.path.splitext(filename.lower())[1]
    try:
        tgfile = await doc.get_file()
        file_bytes = await tgfile.download_as_bytearray()
        if ext in TEXT_LIKE:
            try:
                text = file_bytes.decode("utf-8", errors="strict")
            except UnicodeDecodeError:
                text = file_bytes.decode("utf-8", errors="replace")
            reply = await chat_with_ai_file(filename, text)
            await update.message.reply_text(reply)
        else:
            await update.message.reply_document(BytesIO(file_bytes), filename=filename)
            await update.message.reply_text("–≠—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª ‚Äî –≤–µ—Ä–Ω—É–ª –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ.")
    except Exception:
        refund_tokens(uid, DOC_COST)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")

# ========= –ê–î–ú–ò–ù =========
(ADMIN_MENU, ASK_GIVE_ID, ASK_GIVE_AMOUNT, ASK_PROMO_CODE, ASK_PROMO_AMOUNT) = range(5)

async def admin_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=admin_menu)
    return ADMIN_MENU

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return ConversationHandler.END
    txt = update.message.text.strip()
    if txt == "üíé –í—ã–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ USER_ID:", reply_markup=ReplyKeyboardRemove())
        return ASK_GIVE_ID
    elif txt == "üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())
        return ASK_PROMO_CODE
    elif txt == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=user_menu)
        return ConversationHandler.END
    return ADMIN_MENU

async def admin_ask_give_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid_txt = update.message.text.strip()
    if not uid_txt.isdigit():
        await update.message.reply_text("–ù—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π USER_ID.")
        return ASK_GIVE_ID
    context.user_data["give_uid"] = int(uid_txt)
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã–¥–∞—Ç—å?")
    return ASK_GIVE_AMOUNT

async def admin_ask_give_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount_txt = update.message.text.strip()
    if not amount_txt.lstrip("-").isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ASK_GIVE_AMOUNT
    amount = int(amount_txt)
    target_id = context.user_data.pop("give_uid", None)
    add_tokens(target_id, amount)
    await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.", reply_markup=admin_menu)
    return ADMIN_MENU

async def admin_ask_promo_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    context.user_data["promo_code"] = code
    await update.message.reply_text("–ù–∞ —Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥?")
    return ASK_PROMO_AMOUNT

async def admin_ask_promo_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount_txt = update.message.text.strip()
    amount = int(amount_txt)
    code = context.user_data.pop("promo_code", None)
    create_promo(code, amount)
    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω –Ω–∞ {amount} —Ç–æ–∫–µ–Ω–æ–≤.", reply_markup=admin_menu)
    return ADMIN_MENU

async def admin_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–¥–º–∏–Ω-–¥–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=admin_menu)
    return ConversationHandler.END

# ========= MAIN =========
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("redeem", redeem_cmd))

    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    app.add_handler(MessageHandler(filters.Regex("^üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å$|^‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å \\(–ø—Ä–æ–º–æ–∫–æ–¥\\)$|^‚ÑπÔ∏è –ü–æ–º–æ—â—å$"), on_user_button))

    # –∞–¥–º–∏–Ω
    admin_conv = ConversationHandler(
        entry_points=[CommandHandler("admin", admin_entry)],
        states={
            ADMIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_menu_handler)],
            ASK_GIVE_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_ask_give_id)],
            ASK_GIVE_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_ask_give_amount)],
            ASK_PROMO_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_ask_promo_code)],
            ASK_PROMO_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_ask_promo_amount)],
        },
        fallbacks=[CommandHandler("cancel", admin_cancel)],
        allow_reentry=True,
    )
    app.add_handler(admin_conv)

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ Polling")
    app.run_polling()

if __name__ == "__main__":
    main()
