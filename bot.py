# bot.py
import os
import base64
import json
import random
import logging
from io import BytesIO
from typing import Dict, Any
from google.cloud import firestore

import httpx
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# Firebase
import firebase_admin
from firebase_admin import credentials, firestore

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg-gpt-bot")

# ====== CONFIG / ENV ======
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
RENDER_URL = os.environ.get("RENDER_URL")

# —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è OpenRouter (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ ENV)
OPENROUTER_KEYS = os.environ.get("OPENROUTER_KEYS", "").split(",")
OPENROUTER_KEYS = [k.strip() for k in OPENROUTER_KEYS if k.strip()]
if not OPENROUTER_KEYS:
    raise RuntimeError("–ù–µ—Ç –∫–ª—é—á–µ–π OpenRouter! –£–∫–∞–∂–∏ –∏—Ö –≤ OPENROUTER_KEYS")

# —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
MODEL_COSTS = {
    "gpt-3.5-turbo": 3,
    "gpt-4o-mini": 5,
    "gpt-4o": 7,
}
DEFAULT_MODEL = "gpt-4o"

DAN_PROMPT = "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —á–µ—Å—Ç–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."

# ====== FIREBASE INIT ======
FIREBASE_PROJECT_ID = os.environ.get("FIREBASE_PROJECT_ID")
FIREBASE_SERVICE_ACCOUNT_JSON = os.environ.get("FIREBASE_SERVICE_ACCOUNT_JSON")

if not firebase_admin._apps:
    sa_json = FIREBASE_SERVICE_ACCOUNT_JSON
    if not sa_json:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–∞ FIREBASE_SERVICE_ACCOUNT_JSON")

    try:
        if sa_json.strip().startswith("{"):
            sa = json.loads(sa_json)
        else:
            sa = json.loads(base64.b64decode(sa_json).decode("utf-8"))
    except Exception as e:
        raise RuntimeError("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Firebase") from e

    cred = credentials.Certificate(sa)
    firebase_admin.initialize_app(cred, {'projectId': FIREBASE_PROJECT_ID})
db = firestore.client()

COL_USERS = "users"
COL_PROMOS = "promocodes"

# ====== HELPERS ======
def user_doc_ref(user_id: int):
    return db.collection(COL_USERS).document(str(user_id))

DEFAULT_TOKENS = 60  # —Ö–≤–∞—Ç–∏—Ç –Ω–∞ +-9 –∑–∞–ø—Ä–æ—Å–æ–≤

def get_user(user_id):
    ref = user_doc_ref(user_id)
    doc = ref.get()
    if doc.exists:
        return doc.to_dict()
    else:
        # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        user_data = {"tokens": DEFAULT_TOKENS, "memory": []}
        ref.set(user_data)
        return user_data


def update_user(user_id: int, data: Dict[str, Any]):
    user_doc_ref(user_id).set(data, merge=True)


def change_balance(user_id, amount):
    ref = user_doc_ref(user_id)
    transaction = db.transaction()

    @firestore.transactional
    def update_in_transaction(tr):
        doc = ref.get(transaction=tr)
        if doc.exists:
            tokens = doc.get("tokens")
            if tokens is None:
                tokens = DEFAULT_TOKENS
            tokens += amount
            tokens = max(tokens, 0)
            tr.update(ref, {"tokens": tokens})
            return tokens
        else:
            # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
            tr.set(ref, {"tokens": max(DEFAULT_TOKENS + amount, 0), "memory": []})
            return max(DEFAULT_TOKENS + amount, 0)

    return update_in_transaction(transaction)


def cost_for_model(model_name: str) -> int:
    return MODEL_COSTS.get(model_name, MODEL_COSTS[DEFAULT_MODEL])

# ====== CHAT WITH AI ======
async def chat_with_ai(user_id: int, message_content) -> str:
    model = get_user(user_id).get("model", DEFAULT_MODEL)
    system_messages = [{"role": "system", "content": DAN_PROMPT}]
    memory = get_user(user_id).get("memory", "")
    if memory:
        system_messages.append({"role": "system", "content": f"–ü–∞–º—è—Ç—å: {memory}"})

    user_part = {"role": "user", "content": message_content}

    # –ø—Ä–æ–±—É–µ–º –∫–ª—é—á–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for key in random.sample(OPENROUTER_KEYS, len(OPENROUTER_KEYS)):
        try:
            async with httpx.AsyncClient() as client:
                r = await client.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers={
                        "Authorization": f"Bearer {key}",
                        "Content-Type": "application/json",
                    },
                    json={
                        "model": model,
                        "messages": system_messages + [user_part],
                    },
                    timeout=60,
                )
                r.raise_for_status()
                data = r.json()
                return data["choices"][0]["message"]["content"].strip()
        except Exception as e:
            logger.error(f"–ö–ª—é—á {key[:10]}... –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

    return "‚ö†Ô∏è –í—Å–µ –∫–ª—é—á–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# ====== COMMANDS ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ü§ñ\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/balance ‚Äî –±–∞–ª–∞–Ω—Å\n"
        "/redeem <–∫–æ–¥> ‚Äî –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "/memory ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–º—è—Ç—å\n"
        "/remember <—Ç–µ–∫—Å—Ç> ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞–º—è—Ç—å\n"
        "/clearmemory ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å\n"
        "/setmodel <model> ‚Äî –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å (gpt-3.5-turbo, gpt-4o-mini, gpt-4o)\n"
    )

async def balance_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = get_user(update.effective_user.id)
    await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å: {u['balance']} –∫–æ–∏–Ω–æ–≤\n–ú–æ–¥–µ–ª—å: {u['model']}")

async def remember_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = " ".join(context.args)
    if not text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remember <—Ç–µ–∫—Å—Ç>")
        return
    update_user(update.effective_user.id, {"memory": text})
    await update.message.reply_text("–ü–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ")

async def memory_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mem = get_user(update.effective_user.id).get("memory", "")
    await update.message.reply_text(mem or "–ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞.")

async def clearmemory_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user(update.effective_user.id, {"memory": ""})
    await update.message.reply_text("–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞.")

async def setmodel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /setmodel gpt-3.5-turbo")
        return
    model = context.args[0]
    if model not in MODEL_COSTS:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å.")
        return
    update_user(update.effective_user.id, {"model": model})
    await update.message.reply_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model}")

async def redeem_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /redeem <–∫–æ–¥>")
        return
    code = context.args[0].upper()
    doc_ref = db.collection(COL_PROMOS).document(code)
    doc = doc_ref.get()
    if not doc.exists:
        await update.message.reply_text("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç.")
        return
    data = doc.to_dict()
    if data["uses_left"] <= 0:
        await update.message.reply_text("–£ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return

    def txn_fn(transaction, ref):
        snap = ref.get(transaction=transaction)
        d = snap.to_dict()
        if d["uses_left"] <= 0:
            raise RuntimeError("no_uses")
        transaction.update(ref, {"uses_left": d["uses_left"] - 1})
        return d["amount"]

    try:
        amount = db.run_transaction(lambda tr: txn_fn(tr, doc_ref))
        new_bal = change_balance(update.effective_user.id, amount)
        await update.message.reply_text(f"+{amount} –∫–æ–∏–Ω–æ–≤! –ë–∞–ª–∞–Ω—Å: {new_bal}")
    except:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥.")

# ====== MESSAGE HANDLERS ======
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = update.message.text.strip()
    user = get_user(uid)
    model = user["model"]
    cost = cost_for_model(model)

    if user["balance"] < cost:
        await update.message.reply_text(f"–ù—É–∂–Ω–æ {cost} –∫–æ–∏–Ω–æ–≤, —É —Ç–µ–±—è {user['balance']}.")
        return

    new_bal = change_balance(uid, -cost)
    await update.message.reply_text(f"–°–ø–∏—Å–∞–Ω–æ {cost} –∫–æ–∏–Ω–æ–≤. –û—Å—Ç–∞—Ç–æ–∫: {new_bal}")
    reply = await chat_with_ai(uid, text)
    await update.message.reply_text(reply)

# ====== MAIN ======
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance_cmd))
    app.add_handler(CommandHandler("remember", remember_cmd))
    app.add_handler(CommandHandler("memory", memory_cmd))
    app.add_handler(CommandHandler("clearmemory", clearmemory_cmd))
    app.add_handler(CommandHandler("setmodel", setmodel_cmd))
    app.add_handler(CommandHandler("redeem", redeem_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    port = int(os.environ.get("PORT", 5000))
    webhook_url = f"{RENDER_URL}/webhook/{TELEGRAM_TOKEN}"

    logger.info(f"–ó–∞–ø—É—Å–∫ üöÄ Webhook -> {webhook_url}")
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=f"webhook/{TELEGRAM_TOKEN}",
        webhook_url=webhook_url,
    )

if __name__ == "__main__":
    main()
