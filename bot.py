import logging
import httpx
import os
import base64
import json
from io import BytesIO
from typing import Optional

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg-gpt-bot")

ADMIN_ID = int(os.getenv("ADMIN_ID", "8033358653"))

TEXT_COST = int(os.getenv("TEXT_COST", "1"))
PHOTO_COST = int(os.getenv("PHOTO_COST", "2"))
DOC_COST = int(os.getenv("DOC_COST", "2"))
DEFAULT_TOKENS = int(os.getenv("DEFAULT_TOKENS", "20"))

DB_FILE = "users.json"
PROMO_FILE = "promocodes.json"

RENDER_URL = os.getenv("RENDER_URL")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_MODEL = os.getenv("OPENROUTER_MODEL")

DAN_PROMPT = """
–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —á–µ—Å—Ç–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.
–ï—Å–ª–∏ –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—É, –∞ —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
–ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–Ω —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äî –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ —ç—Ç–æ –∑–∞ —Ñ–∞–π–ª –∏ —á—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –ø–æ –¥–µ–ª—É.
"""

# ========= –•–†–ê–ù–ò–õ–ò–©–ï (JSON) =========
def _load_json(path: str) -> dict:
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            logger.exception(f"–§–∞–π–ª {path} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω.")
    return {}

def _save_json(path: str, data: dict) -> None:
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = _load_json(DB_FILE)      # { user_id: {"tokens": int} }
promos = _load_json(PROMO_FILE)  # { "CODE": amount }

def ensure_user(user_id: int) -> None:
    uid = str(user_id)
    if uid not in users:
        users[uid] = {"tokens": DEFAULT_TOKENS}
        _save_json(DB_FILE, users)

def get_tokens(user_id: int) -> int:
    return users.get(str(user_id), {}).get("tokens", DEFAULT_TOKENS)

def add_tokens(user_id: int | str, amount: int) -> None:
    uid = str(user_id)
    ensure_user(int(uid))
    users[uid]["tokens"] = get_tokens(int(uid)) + amount
    _save_json(DB_FILE, users)

def use_tokens(user_id: int, amount: int) -> bool:
    ensure_user(user_id)
    have = get_tokens(user_id)
    if have >= amount:
        users[str(user_id)]["tokens"] = have - amount
        _save_json(DB_FILE, users)
        return True
    return False

def refund_tokens(user_id: int, amount: int) -> None:
    add_tokens(user_id, amount)

def create_promo(code: str, amount: int) -> None:
    promos[code] = amount
    _save_json(PROMO_FILE, promos)

def redeem_promo(user_id: int, code: str) -> bool:
    if code in promos:
        add_tokens(user_id, int(promos[code]))
        del promos[code]
        _save_json(PROMO_FILE, promos)
        return True
    return False

def delete_promo(code: str) -> bool:
    if code in promos:
        del promos[code]
        _save_json(PROMO_FILE, promos)
        return True
    return False

# ========= –ú–ï–ù–Æ =========
user_menu = ReplyKeyboardMarkup(
    [
        ["üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å (–ø—Ä–æ–º–æ–∫–æ–¥)"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"],
    ],
    resize_keyboard=True
)

admin_menu = ReplyKeyboardMarkup(
    [
        ["üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å (–ø—Ä–æ–º–æ–∫–æ–¥)"],
        ["üíé –í—ã–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã", "üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"],
        ["üìú –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"],
        ["üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üîô –ù–∞–∑–∞–¥"],
    ],
    resize_keyboard=True
)

# ========= GPT =========
async def openrouter_chat(messages: list, model: str) -> str:
    try:
        async with httpx.AsyncClient() as client:
            r = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json",
                },
                json={"model": model, "messages": messages},
                timeout=60,
            )
            r.raise_for_status()
            data = r.json()
            return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
        raise

async def chat_with_ai_text(user_id: int, message: str) -> str:
    msgs = [
        {"role": "system", "content": DAN_PROMPT},
        {"role": "user", "content": message}
    ]
    return await openrouter_chat(msgs, OPENROUTER_MODEL)

async def chat_with_ai_image(user_question: str, b64_image: str) -> str:
    user_content = [
        {
            "type": "text",
            "text": (
                f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_question}\n"
                f"–ù–∏–∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –Ω–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Å–∞–º –≤–æ–ø—Ä–æ—Å."
            ),
        },
        {
            "type": "image_url",
            "image_url": f"data:image/jpeg;base64,{b64_image}",
        },
    ]
    msgs = [
        {"role": "system", "content": DAN_PROMPT},
        {"role": "user", "content": user_content},
    ]
    return await openrouter_chat(msgs, OPENROUTER_MODEL)

async def chat_with_ai_file(filename: str, text: str) -> str:
    snippet = text[:8000]
    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–∞–π–ª: {filename}\n"
        f"–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —á—Ç–æ —ç—Ç–æ –∑–∞ —Ñ–∞–π–ª, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥/—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, "
        f"–∏ —É–∫–∞–∂–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.\n\n"
        f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{snippet}"
    )
    msgs = [
        {"role": "system", "content": DAN_PROMPT},
        {"role": "user", "content": prompt},
    ]
    return await openrouter_chat(msgs, OPENROUTER_MODEL)

# ========= –•–ï–õ–ü–ï–†–´ =========
def is_admin(user_id: int) -> bool:
    return ADMIN_ID and user_id == ADMIN_ID

async def send_help(update: Update):
    await update.message.reply_text(
        "‚ÑπÔ∏è –Ø GPT-–±–æ—Ç:\n"
        "‚Äî –û—Ç–≤–µ—á–∞—é –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Äî –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (caption)\n"
        "‚Äî –ß–∏—Ç–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.py, .txt, .json –∏ –¥—Ä.) –∏ –æ–±—ä—è—Å–Ω—è—é –∏—Ö\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/balance ‚Äî –±–∞–ª–∞–Ω—Å\n"
        "/redeem –ö–û–î ‚Äî –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "/top ‚Äî —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–æ–∫–µ–Ω–∞–º\n"
    )

# ========= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    kb = admin_menu if is_admin(uid) else user_menu
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø GPT-–±–æ—Ç ü§ñ", reply_markup=kb)

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {get_tokens(uid)} —Ç–æ–∫–µ–Ω–æ–≤.")

async def redeem_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Ç–∞–∫: /redeem –ö–û–î")
        return
    code = context.args[0].strip()
    if redeem_promo(uid, code):
        await update.message.reply_text("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")

async def top_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    sorted_users = sorted(users.items(), key=lambda x: x[1]["tokens"], reverse=True)
    text = "üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–æ–∫–µ–Ω–∞–º:\n"
    for uid, data in sorted_users[:10]:
        text += f"{uid}: {data['tokens']} —Ç–æ–∫–µ–Ω–æ–≤\n"
    await update.message.reply_text(text)

# ========= –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–ù–û–ü–ö–ò =========
async def on_user_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("give_uid") or context.user_data.get("promo_code"):
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –≤ –∞–¥–º–∏–Ω-–¥–∏–∞–ª–æ–≥–µ

    txt = update.message.text.strip()
    uid = update.effective_user.id
    if txt == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
        await balance(update, context)
    elif txt == "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å (–ø—Ä–æ–º–æ–∫–æ–¥)":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π: /redeem –ö–û–î")
    elif txt == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await send_help(update)

# ========= –¢–ï–ö–°–¢, –§–û–¢–û, –§–ê–ô–õ =========
TEXT_LIKE = {".txt", ".py", ".json", ".md", ".yaml", ".yml", ".toml", ".ini", ".cfg", ".csv"}

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    if not use_tokens(uid, TEXT_COST):
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /redeem –ö–û–î")
        return
    try:
        reply = await chat_with_ai_text(uid, update.message.text)
        await update.message.reply_text(reply)
    except Exception:
        refund_tokens(uid, TEXT_COST)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ AI. –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    if not use_tokens(uid, PHOTO_COST):
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /redeem –ö–û–î")
        return
    try:
        file = await update.message.photo[-1].get_file()
        file_bytes = await file.download_as_bytearray()
        b64 = base64.b64encode(file_bytes).decode("utf-8")
        question = (update.message.caption or "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ?").strip()
        reply = await chat_with_ai_image(question, b64)
        await update.message.reply_text(reply)
    except Exception:
        refund_tokens(uid, PHOTO_COST)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ AI. –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    if not use_tokens(uid, DOC_COST):
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /redeem –ö–û–î")
        return

    doc = update.message.document
    filename = doc.file_name or "file"
    ext = os.path.splitext(filename.lower())[1]

    try:
        tgfile = await doc.get_file()
        file_bytes = await tgfile.download_as_bytearray()
        if ext in TEXT_LIKE:
            try:
                text = file_bytes.decode("utf-8", errors="strict")
            except UnicodeDecodeError:
                text = file_bytes.decode("utf-8", errors="replace")
            reply = await chat_with_ai_file(filename, text)
            await update.message.reply_text(reply)
        else:
            await update.message.reply_document(BytesIO(file_bytes), filename=filename)
            await update.message.reply_text("–≠—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª ‚Äî –≤–µ—Ä–Ω—É–ª –æ–±—Ä–∞—Ç–Ω–æ.")
    except Exception:
        refund_tokens(uid, DOC_COST)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ AI. –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")

# ========= –ê–î–ú–ò–ù =========
(ADMIN_MENU, ASK_GIVE_ID, ASK_GIVE_AMOUNT, ASK_PROMO_CODE, ASK_PROMO_AMOUNT, ASK_DELETE_PROMO) = range(6)

async def admin_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=admin_menu)
    return ADMIN_MENU

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return ConversationHandler.END
    txt = update.message.text.strip()
    if txt == "üíé –í—ã–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ USER_ID:", reply_markup=ReplyKeyboardRemove())
        return ASK_GIVE_ID
    if txt == "üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())
        return ASK_PROMO_CODE
    if txt == "üìú –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤":
        if promos:
            text = "üìú –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n" + "\n".join([f"{k}: {v}" for k,v in promos.items()])
        else:
            text = "üìú –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç."
        await update.message.reply_text(text, reply_markup=admin_menu)
        return ADMIN_MENU
    if txt == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())
        return ASK_DELETE_PROMO
    if txt == "üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        await top_users(update, context)
        return ADMIN_MENU
    if txt == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=user_menu)
        return ConversationHandler.END
    return ADMIN_MENU

async def admin_ask_give_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid_txt = update.message.text.strip()
    if not uid_txt.isdigit():
        await update.message.reply_text("–ù—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π USER_ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ASK_GIVE_ID
    context.user_data["give_uid"] = int(uid_txt)
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã–¥–∞—Ç—å?")
    return ASK_GIVE_AMOUNT

async def admin_ask_give_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount_txt = update.message.text.strip()
    if not amount_txt.lstrip("-").isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return ASK_GIVE_AMOUNT
    amount = int(amount_txt)
    target_id = context.user_data.get("give_uid")
    add_tokens(target_id, amount)
    await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.", reply_markup=admin_menu)
    context.user_data.pop("give_uid", None)
    return ADMIN_MENU

async def admin_ask_promo_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if not code or " " in code:
        await update.message.reply_text("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")
        return ASK_PROMO_CODE
    context.user_data["promo_code"] = code
    await update.message.reply_text("–ù–∞ —Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥?")
    return ASK_PROMO_AMOUNT

async def admin_ask_promo_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount_txt = update.message.text.strip()
    if not amount_txt.lstrip("-").isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return ASK_PROMO_AMOUNT
    amount = int(amount_txt)
    code = context.user_data.get("promo_code")
    create_promo(code, amount)
    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω –Ω–∞ {amount} —Ç–æ–∫–µ–Ω–æ–≤.", reply_markup=admin_menu)
    context.user_data.pop("promo_code", None)
    return ADMIN_MENU

async def admin_ask_delete_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if delete_promo(code):
        await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —É–¥–∞–ª—ë–Ω.", reply_markup=admin_menu)
    else:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_menu)
    return ADMIN_MENU

async def admin_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=admin_menu if is_admin(update.effective_user.id) else user_menu)
    return ConversationHandler.END

# ========= MAIN =========
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("redeem", redeem_cmd))
    app.add_handler(CommandHandler("top", top_users))

    # –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    admin_conv = ConversationHandler(
        entry_points=[CommandHandler("admin", admin_entry)],
        states={
            ADMIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_menu_handler)],
            ASK_GIVE_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_ask_give_id)],
            ASK_GIVE_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_ask_give_amount)],
            ASK_PROMO_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_ask_promo_code)],
            ASK_PROMO_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_ask_promo_amount)],
            ASK_DELETE_PROMO: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_ask_delete_promo)],
        },
        fallbacks=[CommandHandler("cancel", admin_cancel)],
        allow_reentry=True,
    )
    app.add_handler(admin_conv)

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ ‚Äî –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω-–¥–∏–∞–ª–æ–≥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π
    app.add_handler(MessageHandler(filters.Regex("^üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å$|^‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å \\(–ø—Ä–æ–º–æ–∫–æ–¥\\)$|^‚ÑπÔ∏è –ü–æ–º–æ—â—å$"), on_user_button))
    
    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    port = int(os.environ.get("PORT", 5000))
    webhook_url = f"{RENDER_URL}/webhook/{TELEGRAM_TOKEN}"
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ üöÄ Webhook -> {webhook_url}")

    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=f"webhook/{TELEGRAM_TOKEN}",
        webhook_url=webhook_url
    )

if __name__ == "__main__":
    main()
